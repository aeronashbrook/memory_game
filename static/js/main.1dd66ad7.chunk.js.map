{"version":3,"sources":["components/Div.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Div","props","react_default","a","createElement","className","id","onClick","handleClick","alt","name","src","image","height","width","Score","prompt","count","topscore","App","state","topScore","images","picks","shuffle","temp","index","boxes","_this","amount","length","Math","floor","random","setState","includes","push","console","log","_this2","this","components_Score","map","box","components_Div","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"irDAkBeA,MAff,SAAaC,GAET,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAIL,EAAMK,GAAIC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMK,MACtEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXI,IAAKR,EAAMS,KACXC,IAAKV,EAAMW,MACXC,OAAO,QACPC,MAAM,kBCCPC,MATf,SAAed,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACJJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,WAAWL,EAAMe,QAC1Bd,EAAAC,EAAAC,cAAA,QAAME,GAAG,UAAT,UAA0BL,EAAMgB,MAAhC,iBAAqDhB,EAAMiB,SAA3D,cC+DGC,6MA/DXC,MAAQ,CACNH,MAAO,EACPI,SAAU,EACVC,SACAC,MAAO,GACPP,OAAQ,mCAGZQ,QAAU,WAMR,IALA,IAEIC,EACAC,EAHEC,EAAQC,EAAKR,MAAME,OACrBO,EAASF,EAAMG,OAIZD,EAAS,GACZH,EAAQK,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCJ,EAAOE,IADPE,GAEAF,EAAME,GAAUF,EAAMD,GACtBC,EAAMD,GAASD,EAEnBG,EAAKM,SAAS,CAAEZ,cAElBd,YAAc,SAAAF,GAEPsB,EAAKR,MAAMG,MAAMY,SAAS7B,IAe3BsB,EAAKM,SAAS,CAAEjB,MAAO,EAAGM,MAAO,GAAIP,OAAQ,wCAC7CY,EAAKJ,YAfLI,EAAKR,MAAMG,MAAMa,KAAK9B,GACtBsB,EAAKM,SAAS,CAAEjB,MAAOW,EAAKR,MAAMH,MAAQ,EAAGD,OAAQ,aAAe,WAChEY,EAAKR,MAAMH,MAAQW,EAAKR,MAAMC,UAC9BO,EAAKM,SAAS,CAAEb,SAAUO,EAAKR,MAAMH,OAAS,WACrB,KAArBW,EAAKR,MAAMH,OACXW,EAAKM,SAAS,CAAEjB,MAAO,EAAGM,MAAO,SAKzCK,EAAKJ,WAQTa,QAAQC,IAAIV,EAAKR,MAAMG,gFAGV,IAAAgB,EAAAC,KACL,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,CAAOxB,MAAOuB,KAAKpB,MAAMH,MAAOC,SAAUsB,KAAKpB,MAAMC,SAAUL,OAAQwB,KAAKpB,MAAMJ,SAClFd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVmC,KAAKpB,MAAME,OAAOoB,IAAI,SAAAC,GAAG,OACxBzC,EAAAC,EAAAC,cAACwC,EAAD,CAAKhC,MAAO+B,EAAI/B,MAAON,GAAIqC,EAAIrC,GAAIE,YAAa+B,EAAK/B,yBAtDzDqC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1dd66ad7.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../css/Div.css\"\n\nfunction Div(props) {\n\n    return (\n        <div className=\"box\" id={props.id} onClick={() => props.handleClick(props.id)}>\n            <img className=\"img\"\n                alt={props.name}\n                src={props.image}\n                height=\"150px\"\n                width=\"150px\"\n            />\n        </div>\n\n    );\n}\n\nexport default Div;","import React from \"react\";\nimport \"../css/Score.css\"\n\nfunction Score(props) {\n    return (\n        <div id=\"scoreDiv\">\n            <span id=\"prompts\">{props.prompt}</span>\n            <span id=\"scores\">Score: {props.count} | Top score: {props.topscore} </span>\n        </div>\n    );\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport './App.css';\nimport Div from \"./components/Div\"\nimport Score from \"./components/Score\"\nimport images from \"./boxes.json\"\n\nclass App extends Component {\n    state = {\n      count: 0,\n      topScore: 0,\n      images,\n      picks: [],\n      prompt: \"Click a box to start the game\"\n    };\n    \n  shuffle = () => {\n    const boxes = this.state.images\n    let amount = boxes.length;\n    let temp;\n    let index;\n\n    while (amount > 0) {\n        index = Math.floor(Math.random() * amount);\n        amount--;\n        temp = boxes[amount];\n        boxes[amount] = boxes[index];\n        boxes[index] = temp;\n    }\n    this.setState({ images })\n    }\n  handleClick = id => {\n      \n    if (!this.state.picks.includes(id)) {\n        this.state.picks.push(id);\n        this.setState({ count: this.state.count + 1, prompt: \"Good Job!\" }, () => {\n        if (this.state.count > this.state.topScore) {\n            this.setState({ topScore: this.state.count }, () => {\n            if (this.state.count === 12) {\n                this.setState({ count: 0, picks: [] });\n            }\n            })\n        }\n        });\n        this.shuffle();\n    }\n    else {\n\n        this.setState({ count: 0, picks: [], prompt: \"Sorry, you already clicked that one\" });\n        this.shuffle();\n    }\n\n    console.log(this.state.picks)\n\n        }\n        render() {\n            return (\n              <div>\n                <Score count={this.state.count} topscore={this.state.topScore} prompt={this.state.prompt} />\n                <div className=\"Wrapper\">\n                    {this.state.images.map(box => (\n                      <Div image={box.image} id={box.id} handleClick={this.handleClick} />\n                    ))}\n                </div>\n              </div>\n            );\n          }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}